/* class="" in html, is for asigning a class to any element, it can be assigned multiple ones separated by a space IN HTML
for calling them out in .css, you must only input ".", you can call multiples by separating them by a coma "," enter.

if you have an element that you want to call out, and it has multiple classes asigned and one of them 
is also shared with other elements, you can stack and only call out the ones who share those exact same ones 
by ".class1.class2" no spaces. Only the ones who satisfied both or x-amount would be called. That's kol jajaj "chaining"
classes and id can als be chained. Like so: .class#id

You can asign stuff to types (<div>) or so, no sign needed

html id="x" and called out by #x, x being anything.

Desc-Combinators is a selectror that let us combine and mantain a child-parent relationship
only applies for elements nested inside others. just sparated by a space IN CSS
"A descendant combinator will only cause elements that match the last selector to be selected
if they also have an ancestor (parent, grandparent, etc) that matches the previous selector."
So something like .ancestor .child would select an element
with the class child if it has an ancestor with the class ancestor. 
Another way to think of it is child will only be selected if it is nested inside of ancestor, no matter how deep.

Next example only selects B and C, NOT A NOR D.

<!-- index.html -->

<div class="ancestor">
  <!-- A -->
  <div class="contents">
    <!-- B -->
    <div class="contents"><!-- C --></div>
  </div>
</div>

<div class="contents"></div>
<!-- D -->

**styles.css** 

.ancestor .contents {
     some declarations 
  } 
  
  Thereâ€™s really no limit to how many combinators you can add to a rule, so .one .two .three .four would be totally valid. 
  This would just select an element that has a class of four if it has an ancestor with a class of three
  
  comma let us add multiple veets

  */


  p {
    color: rgba(15, 93, 114, 0.496);
  }

  div {
        font-family: 'Times New Roman', Times, serif; /* font family name*/ /*it pulls the first one and if it doesnt support it goes to the next and so on*/
    
  }

  h1 {
        font-family: sans-serif;   /* generic family name*/ 
        font-size: 50px;
        font-weight: 400; /* from 1 to 1000 */
        text-align: center; /* align horizontally within an element*/
  }

  img.skateboard {
                    height: auto; width: 300px; /* won't lose proportion, always include something relating, so it wont
                    mess up if it takes longer to load, reserve space */    
  }